// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/coderlewin/kratosinit/internal/biz"
	"github.com/coderlewin/kratosinit/internal/biz/user"
	"github.com/coderlewin/kratosinit/internal/conf"
	"github.com/coderlewin/kratosinit/internal/data"
	"github.com/coderlewin/kratosinit/internal/pkg/auth"
	"github.com/coderlewin/kratosinit/internal/pkg/middleware"
	"github.com/coderlewin/kratosinit/internal/server"
	"github.com/coderlewin/kratosinit/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, jwt *conf.Jwt, logger log.Logger) (*kratos.App, func(), error) {
	query, cleanup, err := data.NewMysql(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	cmdable, cleanup2, err := data.NewRedis(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	dataData, err := data.NewData(confData, query, cmdable)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	authnInterface := auth.NewAuthnInterface(cmdable, jwt)
	userBiz := user.NewBiz(userRepo, logger, authnInterface)
	iBiz := biz.New(userBiz)
	userService := service.NewUserService(iBiz)
	authService := service.NewAuthService(iBiz)
	checkAuthMiddleware := middleware.NewCheckAuthMiddleware(authnInterface)
	checkRoleMiddleware := middleware.NewCheckRoleMiddleware(userRepo)
	httpServer := server.NewHTTPServer(confServer, userService, authService, checkAuthMiddleware, checkRoleMiddleware, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
